name: CI/CD Pipeline
run-name: ${{ github.actor }} is Deploying

on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      IMAGE_TAG: ${{ github.event_name == 'push' && github.ref_type == 'tag' && github.ref_name || github.sha }}
    steps:
  
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push auth service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/auth
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/auth:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/auth:latest

      - name: Build and push discounts service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/discounts
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/discounts:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/discounts:latest

      - name: Build and push items service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/items
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/items:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/items:latest

      - name: Build and push client
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/client:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/client:latest

     
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Import existing resources
        run: |
          terraform import azurerm_resource_group.aks_rg "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/bud-restauranty-rg" || echo "Import may have failed (resource may already exist)"
          terraform import azurerm_kubernetes_cluster.aks "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/bud-restauranty-rg/providers/Microsoft.ContainerService/managedClusters/bud-restauranty-cluster" || echo "Import may have failed (resource may already exist)"
          terraform import azurerm_public_ip.ingress_ip "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/bud-restauranty-rg/providers/Microsoft.Network/publicIPAddresses/ingress-public-ip" || echo "Import may have failed (resource may already exist)"
        working-directory: terraform/

      - name: Terraform Apply
        id: tf-apply
        run: |
          terraform apply -auto-approve
          
          # Capture outputs with validation
          AKS_RG=$(terraform output -raw aks_resource_group)
          AKS_CLUSTER=$(terraform output -raw aks_cluster_name)
          
          if [ -z "$AKS_RG" ] || [ -z "$AKS_CLUSTER" ]; then
            echo "::error::Failed to get required Terraform outputs"
            exit 1
          fi
          
          echo "AKS_RG=$AKS_RG" >> $GITHUB_ENV
          echo "AKS_CLUSTER=$AKS_CLUSTER" >> $GITHUB_ENV
        working-directory: terraform/


      - name: Configure AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group "$AKS_RG" \
            --name "$AKS_CLUSTER" \
            --overwrite-existing
          
          # Verify cluster access
          kubectl cluster-info

      - name: Setup Kubernetes Tools
        run: |
          # Install kubectl
          sudo apt-get update && sudo apt-get install -y kubectl
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Create Kubernetes Secrets
        run: |
          kubectl create secret generic db-credentials \
            --from-literal=MONGODB_URI=${{ secrets.MONGODB_URI }} \
            --from-literal=CLOUD_NAME=${{ secrets.CLOUD_NAME }} \
            --from-literal=CLOUD_API_KEY=${{ secrets.CLOUD_API_KEY }} \
            --from-literal=CLOUD_API_SECRET=${{ secrets.CLOUD_API_SECRET }} \
            --from-literal=SECRET=${{ secrets.SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Applications
        run: |
          # Apply Kubernetes manifests
          kubectl apply -f k8s/
          
          # Restart deployments to ensure latest images
          kubectl rollout restart deployment auth-deployment
          kubectl rollout restart deployment discounts-deployment
          kubectl rollout restart deployment items-deployment
          kubectl rollout restart deployment client-deployment
          
          # Verify deployments
          kubectl get pods --watch